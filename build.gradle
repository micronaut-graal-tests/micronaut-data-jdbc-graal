plugins {
    id "net.ltgt.apt-eclipse" version "0.21"
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "nu.studer.jooq" version "4.2"
    id "application"
}

version "0.1"
group "example.jooq"

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://oss.jfrog.org/oss-snapshot-local" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")

    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-graal"
    annotationProcessor "io.micronaut:micronaut-validation"

    compileOnly "org.graalvm.nativeimage:svm"
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "jakarta.persistence:jakarta.persistence-api:2.2.2"
    implementation "io.micronaut.configuration:micronaut-jooq:$micronautSqlVersion"
    implementation "org.simpleflatmapper:sfm-jdbc:8.2.3"

    runtime "io.micronaut.configuration:micronaut-jdbc-tomcat"
    runtime "ch.qos.logback:logback-classic:1.2.3"

    runtime "com.h2database:h2:1.4.199"
    jooqRuntime "com.h2database:h2:1.4.199"

    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testCompile "org.junit.jupiter:junit-jupiter-api"
    testCompile "io.micronaut.test:micronaut-test-junit5"
    testRuntime "org.junit.jupiter:junit-jupiter-engine"
}

test.classpath += configurations.developmentOnly

mainClassName = "example.Application"

// use JUnit 5 platform
test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

jooq {
    devDb(sourceSets.main) {
        jdbc {
            driver = 'org.h2.Driver'
            url = 'jdbc:h2:mem:devDb;MVCC=TRUE;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE;INIT=CREATE TABLE IF NOT EXISTS owner( id INT AUTO_INCREMENT, name VARCHAR(255) NOT NULL, age INT NOT NULL, CONSTRAINT owner_pk PRIMARY KEY (id))\\; CREATE TABLE IF NOT EXISTS pet ( id UUID DEFAULT random_uuid() NOT NULL, name VARCHAR(255) NOT NULL, owner_id INT NOT NULL, CONSTRAINT pet_pk PRIMARY KEY (id), CONSTRAINT pet_owner_id_fk FOREIGN KEY (owner_id) REFERENCES owner )\\;'
            user = 'sa'
            password = ''
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            database {
                name = 'org.jooq.meta.h2.H2Database'
                inputSchema = 'PUBLIC'
            }
            target {
                packageName = "example.domain"
            }
        }
    }
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
